grammar zbr.test.condition.Condition with org.eclipse.xtext.common.Terminals

//generate condition "http://www.test.zbr/condition/Condition"
import "http://www.test.zbr/condition/Condition"

Model:
	(condition += Condition |
	conditionalExpression+=ConditionalExpression)*
;

ConditionalExpression :
	(beforeSymbol = LogicalOpeartor)?
	'when' '('  conditionParam=Condition')' 'do' '{'
		condition=Condition
	'}'
	(aftetrSymbol = LogicalOpeartor)?
;

LogicalOpeartor:
	symbol = "AND" | symbol="OR"
;

Condition:
	CompositeCondition
;

CompositeCondition returns Condition:
	Negation ({BinaryTermOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*;

Negation returns Condition:
	Term | {UnaryTermOperator} symbol='NOT' condition=Term;
	
Term returns Condition:
	'(' Condition ')' |
	SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
;


TimeInterval: 
	'TimeInterval' '(' start=STRING 'to' end=STRING')'
; 

SessionInterval: 
	('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  ) ')'|
	('SessionInterval' '('frequency=INT timeUnit=TimeUnit')') |
	('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' value=STRING  ) ')'
; 

Timeout:
	'Timeout' '(' value=STRING ')'
;

MaxNumberOfOperation:
	'MaxNumberOfOperation' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
;

WeekDaysInterval:
	('WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')')
	
;

MessageContent:
	('MessageContent' '(' content=STRING ')') | 	
	('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
	('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING')' )|
	('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING 'by' timeUnit=TimeUnit')' ) 
;



ComparisonOperator:
	symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='	| symbol='==' 
;

enum WeekDay:
    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
;
    
enum TimeUnit:
    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
;


QualifiedName:
	ID ('.' ID)*;
	
QualifiedNameWithWildcard:
	QualifiedName '.*'; 