/**
 * generated by Xtext 2.28.0
 */
package zbr.test.condition.condition.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import zbr.test.condition.condition.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see zbr.test.condition.condition.ConditionPackage
 * @generated
 */
public class ConditionAdapterFactory extends AdapterFactoryImpl
{
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static ConditionPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ConditionAdapterFactory()
	{
		if (modelPackage == null)
		{
			modelPackage = ConditionPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object)
	{
		if (object == modelPackage)
		{
			return true;
		}
		if (object instanceof EObject)
		{
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionSwitch<Adapter> modelSwitch =
		new ConditionSwitch<Adapter>()
		{
			@Override
			public Adapter caseModel(Model object)
			{
				return createModelAdapter();
			}
			@Override
			public Adapter caseCondition(Condition object)
			{
				return createConditionAdapter();
			}
			@Override
			public Adapter caseUnaryTermOperator(UnaryTermOperator object)
			{
				return createUnaryTermOperatorAdapter();
			}
			@Override
			public Adapter caseBinaryTermOperator(BinaryTermOperator object)
			{
				return createBinaryTermOperatorAdapter();
			}
			@Override
			public Adapter caseTerm(Term object)
			{
				return createTermAdapter();
			}
			@Override
			public Adapter caseCompositeCondition(CompositeCondition object)
			{
				return createCompositeConditionAdapter();
			}
			@Override
			public Adapter caseSessionInterval(SessionInterval object)
			{
				return createSessionIntervalAdapter();
			}
			@Override
			public Adapter caseTimeInterval(TimeInterval object)
			{
				return createTimeIntervalAdapter();
			}
			@Override
			public Adapter caseTimeout(Timeout object)
			{
				return createTimeoutAdapter();
			}
			@Override
			public Adapter caseWeekDaysInterval(WeekDaysInterval object)
			{
				return createWeekDaysIntervalAdapter();
			}
			@Override
			public Adapter caseMaxNumberOfOperation(MaxNumberOfOperation object)
			{
				return createMaxNumberOfOperationAdapter();
			}
			@Override
			public Adapter caseMessageContent(MessageContent object)
			{
				return createMessageContentAdapter();
			}
			@Override
			public Adapter caseComparisonOperator(ComparisonOperator object)
			{
				return createComparisonOperatorAdapter();
			}
			@Override
			public Adapter caseConditionalExpression(ConditionalExpression object)
			{
				return createConditionalExpressionAdapter();
			}
			@Override
			public Adapter caseLogicalOpeartor(LogicalOpeartor object)
			{
				return createLogicalOpeartorAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object)
			{
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target)
	{
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.Model <em>Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.Model
	 * @generated
	 */
	public Adapter createModelAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.Condition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.Condition
	 * @generated
	 */
	public Adapter createConditionAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.UnaryTermOperator <em>Unary Term Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.UnaryTermOperator
	 * @generated
	 */
	public Adapter createUnaryTermOperatorAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.BinaryTermOperator <em>Binary Term Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.BinaryTermOperator
	 * @generated
	 */
	public Adapter createBinaryTermOperatorAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.Term <em>Term</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.Term
	 * @generated
	 */
	public Adapter createTermAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.CompositeCondition <em>Composite Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.CompositeCondition
	 * @generated
	 */
	public Adapter createCompositeConditionAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.SessionInterval <em>Session Interval</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.SessionInterval
	 * @generated
	 */
	public Adapter createSessionIntervalAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.TimeInterval <em>Time Interval</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.TimeInterval
	 * @generated
	 */
	public Adapter createTimeIntervalAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.Timeout <em>Timeout</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.Timeout
	 * @generated
	 */
	public Adapter createTimeoutAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.WeekDaysInterval <em>Week Days Interval</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.WeekDaysInterval
	 * @generated
	 */
	public Adapter createWeekDaysIntervalAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.MaxNumberOfOperation <em>Max Number Of Operation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.MaxNumberOfOperation
	 * @generated
	 */
	public Adapter createMaxNumberOfOperationAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.MessageContent <em>Message Content</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.MessageContent
	 * @generated
	 */
	public Adapter createMessageContentAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.ComparisonOperator <em>Comparison Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.ComparisonOperator
	 * @generated
	 */
	public Adapter createComparisonOperatorAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.ConditionalExpression <em>Conditional Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.ConditionalExpression
	 * @generated
	 */
	public Adapter createConditionalExpressionAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link zbr.test.condition.condition.LogicalOpeartor <em>Logical Opeartor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see zbr.test.condition.condition.LogicalOpeartor
	 * @generated
	 */
	public Adapter createLogicalOpeartorAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter()
	{
		return null;
	}

} //ConditionAdapterFactory
