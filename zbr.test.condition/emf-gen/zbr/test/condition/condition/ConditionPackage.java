/**
 * generated by Xtext 2.28.0
 */
package zbr.test.condition.condition;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see zbr.test.condition.condition.ConditionFactory
 * @model kind="package"
 * @generated
 */
public interface ConditionPackage extends EPackage
{
	/**
	 * The package name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	String eNAME = "condition";

	/**
	 * The package namespace URI.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	String eNS_URI = "http://www.test.zbr/condition/Condition";

	/**
	 * The package namespace name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	String eNS_PREFIX = "condition";

	/**
	 * The singleton instance of the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	ConditionPackage eINSTANCE = zbr.test.condition.condition.impl.ConditionPackageImpl.init();

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.ModelImpl <em>Model</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.ModelImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getModel()
	 * @generated
	 */
	int MODEL = 0;

	/**
	 * The feature id for the '<em><b>Conditional Expression</b></em>' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MODEL__CONDITIONAL_EXPRESSION = 0;

	/**
	 * The feature id for the '<em><b>Condition</b></em>' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MODEL__CONDITION = 1;

	/**
	 * The number of structural features of the '<em>Model</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MODEL_FEATURE_COUNT = 2;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.ConditionImpl <em>Condition</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.ConditionImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getCondition()
	 * @generated
	 */
	int CONDITION = 1;

	/**
	 * The number of structural features of the '<em>Condition</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int CONDITION_FEATURE_COUNT = 0;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.UnaryTermOperatorImpl <em>Unary Term Operator</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.UnaryTermOperatorImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getUnaryTermOperator()
	 * @generated
	 */
	int UNARY_TERM_OPERATOR = 2;

	/**
	 * The feature id for the '<em><b>Symbol</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int UNARY_TERM_OPERATOR__SYMBOL = CONDITION_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>Condition</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int UNARY_TERM_OPERATOR__CONDITION = CONDITION_FEATURE_COUNT + 1;

	/**
	 * The number of structural features of the '<em>Unary Term Operator</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int UNARY_TERM_OPERATOR_FEATURE_COUNT = CONDITION_FEATURE_COUNT + 2;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.BinaryTermOperatorImpl <em>Binary Term Operator</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.BinaryTermOperatorImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getBinaryTermOperator()
	 * @generated
	 */
	int BINARY_TERM_OPERATOR = 3;

	/**
	 * The feature id for the '<em><b>Symbol</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int BINARY_TERM_OPERATOR__SYMBOL = CONDITION_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>Right</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int BINARY_TERM_OPERATOR__RIGHT = CONDITION_FEATURE_COUNT + 1;

	/**
	 * The feature id for the '<em><b>Left</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int BINARY_TERM_OPERATOR__LEFT = CONDITION_FEATURE_COUNT + 2;

	/**
	 * The number of structural features of the '<em>Binary Term Operator</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int BINARY_TERM_OPERATOR_FEATURE_COUNT = CONDITION_FEATURE_COUNT + 3;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.TermImpl <em>Term</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.TermImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTerm()
	 * @generated
	 */
	int TERM = 4;

	/**
	 * The number of structural features of the '<em>Term</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int TERM_FEATURE_COUNT = CONDITION_FEATURE_COUNT + 0;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.CompositeConditionImpl <em>Composite Condition</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.CompositeConditionImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getCompositeCondition()
	 * @generated
	 */
	int COMPOSITE_CONDITION = 5;

	/**
	 * The feature id for the '<em><b>Conditions</b></em>' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int COMPOSITE_CONDITION__CONDITIONS = CONDITION_FEATURE_COUNT + 0;

	/**
	 * The number of structural features of the '<em>Composite Condition</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int COMPOSITE_CONDITION_FEATURE_COUNT = CONDITION_FEATURE_COUNT + 1;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.SessionIntervalImpl <em>Session Interval</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.SessionIntervalImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getSessionInterval()
	 * @generated
	 */
	int SESSION_INTERVAL = 6;

	/**
	 * The feature id for the '<em><b>Frequency</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int SESSION_INTERVAL__FREQUENCY = TERM_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>Time Unit</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int SESSION_INTERVAL__TIME_UNIT = TERM_FEATURE_COUNT + 1;

	/**
	 * The feature id for the '<em><b>Messagecontent</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int SESSION_INTERVAL__MESSAGECONTENT = TERM_FEATURE_COUNT + 2;

	/**
	 * The feature id for the '<em><b>Value</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int SESSION_INTERVAL__VALUE = TERM_FEATURE_COUNT + 3;

	/**
	 * The number of structural features of the '<em>Session Interval</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int SESSION_INTERVAL_FEATURE_COUNT = TERM_FEATURE_COUNT + 4;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.TimeIntervalImpl <em>Time Interval</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.TimeIntervalImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTimeInterval()
	 * @generated
	 */
	int TIME_INTERVAL = 7;

	/**
	 * The feature id for the '<em><b>Start</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int TIME_INTERVAL__START = TERM_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>End</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int TIME_INTERVAL__END = TERM_FEATURE_COUNT + 1;

	/**
	 * The number of structural features of the '<em>Time Interval</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int TIME_INTERVAL_FEATURE_COUNT = TERM_FEATURE_COUNT + 2;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.TimeoutImpl <em>Timeout</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.TimeoutImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTimeout()
	 * @generated
	 */
	int TIMEOUT = 8;

	/**
	 * The feature id for the '<em><b>Value</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int TIMEOUT__VALUE = TERM_FEATURE_COUNT + 0;

	/**
	 * The number of structural features of the '<em>Timeout</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int TIMEOUT_FEATURE_COUNT = TERM_FEATURE_COUNT + 1;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.WeekDaysIntervalImpl <em>Week Days Interval</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.WeekDaysIntervalImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getWeekDaysInterval()
	 * @generated
	 */
	int WEEK_DAYS_INTERVAL = 9;

	/**
	 * The feature id for the '<em><b>Start</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int WEEK_DAYS_INTERVAL__START = TERM_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>End</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int WEEK_DAYS_INTERVAL__END = TERM_FEATURE_COUNT + 1;

	/**
	 * The number of structural features of the '<em>Week Days Interval</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int WEEK_DAYS_INTERVAL_FEATURE_COUNT = TERM_FEATURE_COUNT + 2;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.MaxNumberOfOperationImpl <em>Max Number Of Operation</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.MaxNumberOfOperationImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getMaxNumberOfOperation()
	 * @generated
	 */
	int MAX_NUMBER_OF_OPERATION = 10;

	/**
	 * The feature id for the '<em><b>Operations Number</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MAX_NUMBER_OF_OPERATION__OPERATIONS_NUMBER = TERM_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>Time Unit</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MAX_NUMBER_OF_OPERATION__TIME_UNIT = TERM_FEATURE_COUNT + 1;

	/**
	 * The number of structural features of the '<em>Max Number Of Operation</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MAX_NUMBER_OF_OPERATION_FEATURE_COUNT = TERM_FEATURE_COUNT + 2;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.MessageContentImpl <em>Message Content</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.MessageContentImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getMessageContent()
	 * @generated
	 */
	int MESSAGE_CONTENT = 11;

	/**
	 * The feature id for the '<em><b>Content</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MESSAGE_CONTENT__CONTENT = TERM_FEATURE_COUNT + 0;

	/**
	 * The feature id for the '<em><b>Time Unit</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MESSAGE_CONTENT__TIME_UNIT = TERM_FEATURE_COUNT + 1;

	/**
	 * The feature id for the '<em><b>Value</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MESSAGE_CONTENT__VALUE = TERM_FEATURE_COUNT + 2;

	/**
	 * The feature id for the '<em><b>Comparison Operator</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MESSAGE_CONTENT__COMPARISON_OPERATOR = TERM_FEATURE_COUNT + 3;

	/**
	 * The number of structural features of the '<em>Message Content</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int MESSAGE_CONTENT_FEATURE_COUNT = TERM_FEATURE_COUNT + 4;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.ComparisonOperatorImpl <em>Comparison Operator</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.ComparisonOperatorImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getComparisonOperator()
	 * @generated
	 */
	int COMPARISON_OPERATOR = 12;

	/**
	 * The feature id for the '<em><b>Symbol</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int COMPARISON_OPERATOR__SYMBOL = 0;

	/**
	 * The number of structural features of the '<em>Comparison Operator</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int COMPARISON_OPERATOR_FEATURE_COUNT = 1;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.ConditionalExpressionImpl <em>Conditional Expression</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.ConditionalExpressionImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getConditionalExpression()
	 * @generated
	 */
	int CONDITIONAL_EXPRESSION = 13;

	/**
	 * The feature id for the '<em><b>Condition Param</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int CONDITIONAL_EXPRESSION__CONDITION_PARAM = 0;

	/**
	 * The feature id for the '<em><b>Condition</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int CONDITIONAL_EXPRESSION__CONDITION = 1;

	/**
	 * The feature id for the '<em><b>Aftetr Symbol</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int CONDITIONAL_EXPRESSION__AFTETR_SYMBOL = 2;

	/**
	 * The feature id for the '<em><b>Before Symbol</b></em>' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int CONDITIONAL_EXPRESSION__BEFORE_SYMBOL = 3;

	/**
	 * The number of structural features of the '<em>Conditional Expression</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int CONDITIONAL_EXPRESSION_FEATURE_COUNT = 4;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.impl.LogicalOpeartorImpl <em>Logical Opeartor</em>}' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.impl.LogicalOpeartorImpl
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getLogicalOpeartor()
	 * @generated
	 */
	int LOGICAL_OPEARTOR = 14;

	/**
	 * The feature id for the '<em><b>Symbol</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int LOGICAL_OPEARTOR__SYMBOL = 0;

	/**
	 * The number of structural features of the '<em>Logical Opeartor</em>' class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 * @ordered
	 */
	int LOGICAL_OPEARTOR_FEATURE_COUNT = 1;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.TimeUnit <em>Time Unit</em>}' enum.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.TimeUnit
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTimeUnit()
	 * @generated
	 */
	int TIME_UNIT = 15;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.SessionStatus <em>Session Status</em>}' enum.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.SessionStatus
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getSessionStatus()
	 * @generated
	 */
	int SESSION_STATUS = 16;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.Operation <em>Operation</em>}' enum.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.Operation
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getOperation()
	 * @generated
	 */
	int OPERATION = 17;

	/**
	 * The meta object id for the '{@link zbr.test.condition.condition.WeekDay <em>Week Day</em>}' enum.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see zbr.test.condition.condition.WeekDay
	 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getWeekDay()
	 * @generated
	 */
	int WEEK_DAY = 18;


	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.Model <em>Model</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Model</em>'.
	 * @see zbr.test.condition.condition.Model
	 * @generated
	 */
	EClass getModel();

	/**
	 * Returns the meta object for the containment reference list '{@link zbr.test.condition.condition.Model#getConditionalExpression <em>Conditional Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference list '<em>Conditional Expression</em>'.
	 * @see zbr.test.condition.condition.Model#getConditionalExpression()
	 * @see #getModel()
	 * @generated
	 */
	EReference getModel_ConditionalExpression();

	/**
	 * Returns the meta object for the containment reference list '{@link zbr.test.condition.condition.Model#getCondition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference list '<em>Condition</em>'.
	 * @see zbr.test.condition.condition.Model#getCondition()
	 * @see #getModel()
	 * @generated
	 */
	EReference getModel_Condition();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.Condition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Condition</em>'.
	 * @see zbr.test.condition.condition.Condition
	 * @generated
	 */
	EClass getCondition();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.UnaryTermOperator <em>Unary Term Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Unary Term Operator</em>'.
	 * @see zbr.test.condition.condition.UnaryTermOperator
	 * @generated
	 */
	EClass getUnaryTermOperator();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.UnaryTermOperator#getSymbol <em>Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Symbol</em>'.
	 * @see zbr.test.condition.condition.UnaryTermOperator#getSymbol()
	 * @see #getUnaryTermOperator()
	 * @generated
	 */
	EAttribute getUnaryTermOperator_Symbol();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.UnaryTermOperator#getCondition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Condition</em>'.
	 * @see zbr.test.condition.condition.UnaryTermOperator#getCondition()
	 * @see #getUnaryTermOperator()
	 * @generated
	 */
	EReference getUnaryTermOperator_Condition();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.BinaryTermOperator <em>Binary Term Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Binary Term Operator</em>'.
	 * @see zbr.test.condition.condition.BinaryTermOperator
	 * @generated
	 */
	EClass getBinaryTermOperator();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.BinaryTermOperator#getSymbol <em>Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Symbol</em>'.
	 * @see zbr.test.condition.condition.BinaryTermOperator#getSymbol()
	 * @see #getBinaryTermOperator()
	 * @generated
	 */
	EAttribute getBinaryTermOperator_Symbol();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.BinaryTermOperator#getRight <em>Right</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Right</em>'.
	 * @see zbr.test.condition.condition.BinaryTermOperator#getRight()
	 * @see #getBinaryTermOperator()
	 * @generated
	 */
	EReference getBinaryTermOperator_Right();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.BinaryTermOperator#getLeft <em>Left</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Left</em>'.
	 * @see zbr.test.condition.condition.BinaryTermOperator#getLeft()
	 * @see #getBinaryTermOperator()
	 * @generated
	 */
	EReference getBinaryTermOperator_Left();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.Term <em>Term</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Term</em>'.
	 * @see zbr.test.condition.condition.Term
	 * @generated
	 */
	EClass getTerm();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.CompositeCondition <em>Composite Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Composite Condition</em>'.
	 * @see zbr.test.condition.condition.CompositeCondition
	 * @generated
	 */
	EClass getCompositeCondition();

	/**
	 * Returns the meta object for the containment reference list '{@link zbr.test.condition.condition.CompositeCondition#getConditions <em>Conditions</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference list '<em>Conditions</em>'.
	 * @see zbr.test.condition.condition.CompositeCondition#getConditions()
	 * @see #getCompositeCondition()
	 * @generated
	 */
	EReference getCompositeCondition_Conditions();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.SessionInterval <em>Session Interval</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Session Interval</em>'.
	 * @see zbr.test.condition.condition.SessionInterval
	 * @generated
	 */
	EClass getSessionInterval();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.SessionInterval#getFrequency <em>Frequency</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Frequency</em>'.
	 * @see zbr.test.condition.condition.SessionInterval#getFrequency()
	 * @see #getSessionInterval()
	 * @generated
	 */
	EAttribute getSessionInterval_Frequency();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.SessionInterval#getTimeUnit <em>Time Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Time Unit</em>'.
	 * @see zbr.test.condition.condition.SessionInterval#getTimeUnit()
	 * @see #getSessionInterval()
	 * @generated
	 */
	EAttribute getSessionInterval_TimeUnit();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.SessionInterval#getMessagecontent <em>Messagecontent</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Messagecontent</em>'.
	 * @see zbr.test.condition.condition.SessionInterval#getMessagecontent()
	 * @see #getSessionInterval()
	 * @generated
	 */
	EReference getSessionInterval_Messagecontent();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.SessionInterval#getValue <em>Value</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Value</em>'.
	 * @see zbr.test.condition.condition.SessionInterval#getValue()
	 * @see #getSessionInterval()
	 * @generated
	 */
	EAttribute getSessionInterval_Value();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.TimeInterval <em>Time Interval</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Time Interval</em>'.
	 * @see zbr.test.condition.condition.TimeInterval
	 * @generated
	 */
	EClass getTimeInterval();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.TimeInterval#getStart <em>Start</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Start</em>'.
	 * @see zbr.test.condition.condition.TimeInterval#getStart()
	 * @see #getTimeInterval()
	 * @generated
	 */
	EAttribute getTimeInterval_Start();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.TimeInterval#getEnd <em>End</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>End</em>'.
	 * @see zbr.test.condition.condition.TimeInterval#getEnd()
	 * @see #getTimeInterval()
	 * @generated
	 */
	EAttribute getTimeInterval_End();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.Timeout <em>Timeout</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Timeout</em>'.
	 * @see zbr.test.condition.condition.Timeout
	 * @generated
	 */
	EClass getTimeout();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.Timeout#getValue <em>Value</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Value</em>'.
	 * @see zbr.test.condition.condition.Timeout#getValue()
	 * @see #getTimeout()
	 * @generated
	 */
	EAttribute getTimeout_Value();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.WeekDaysInterval <em>Week Days Interval</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Week Days Interval</em>'.
	 * @see zbr.test.condition.condition.WeekDaysInterval
	 * @generated
	 */
	EClass getWeekDaysInterval();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.WeekDaysInterval#getStart <em>Start</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Start</em>'.
	 * @see zbr.test.condition.condition.WeekDaysInterval#getStart()
	 * @see #getWeekDaysInterval()
	 * @generated
	 */
	EAttribute getWeekDaysInterval_Start();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.WeekDaysInterval#getEnd <em>End</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>End</em>'.
	 * @see zbr.test.condition.condition.WeekDaysInterval#getEnd()
	 * @see #getWeekDaysInterval()
	 * @generated
	 */
	EAttribute getWeekDaysInterval_End();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.MaxNumberOfOperation <em>Max Number Of Operation</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Max Number Of Operation</em>'.
	 * @see zbr.test.condition.condition.MaxNumberOfOperation
	 * @generated
	 */
	EClass getMaxNumberOfOperation();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.MaxNumberOfOperation#getOperationsNumber <em>Operations Number</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Operations Number</em>'.
	 * @see zbr.test.condition.condition.MaxNumberOfOperation#getOperationsNumber()
	 * @see #getMaxNumberOfOperation()
	 * @generated
	 */
	EAttribute getMaxNumberOfOperation_OperationsNumber();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.MaxNumberOfOperation#getTimeUnit <em>Time Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Time Unit</em>'.
	 * @see zbr.test.condition.condition.MaxNumberOfOperation#getTimeUnit()
	 * @see #getMaxNumberOfOperation()
	 * @generated
	 */
	EAttribute getMaxNumberOfOperation_TimeUnit();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.MessageContent <em>Message Content</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Message Content</em>'.
	 * @see zbr.test.condition.condition.MessageContent
	 * @generated
	 */
	EClass getMessageContent();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.MessageContent#getContent <em>Content</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Content</em>'.
	 * @see zbr.test.condition.condition.MessageContent#getContent()
	 * @see #getMessageContent()
	 * @generated
	 */
	EAttribute getMessageContent_Content();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.MessageContent#getTimeUnit <em>Time Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Time Unit</em>'.
	 * @see zbr.test.condition.condition.MessageContent#getTimeUnit()
	 * @see #getMessageContent()
	 * @generated
	 */
	EAttribute getMessageContent_TimeUnit();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.MessageContent#getValue <em>Value</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Value</em>'.
	 * @see zbr.test.condition.condition.MessageContent#getValue()
	 * @see #getMessageContent()
	 * @generated
	 */
	EAttribute getMessageContent_Value();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.MessageContent#getComparisonOperator <em>Comparison Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Comparison Operator</em>'.
	 * @see zbr.test.condition.condition.MessageContent#getComparisonOperator()
	 * @see #getMessageContent()
	 * @generated
	 */
	EReference getMessageContent_ComparisonOperator();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.ComparisonOperator <em>Comparison Operator</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Comparison Operator</em>'.
	 * @see zbr.test.condition.condition.ComparisonOperator
	 * @generated
	 */
	EClass getComparisonOperator();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.ComparisonOperator#getSymbol <em>Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Symbol</em>'.
	 * @see zbr.test.condition.condition.ComparisonOperator#getSymbol()
	 * @see #getComparisonOperator()
	 * @generated
	 */
	EAttribute getComparisonOperator_Symbol();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.ConditionalExpression <em>Conditional Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Conditional Expression</em>'.
	 * @see zbr.test.condition.condition.ConditionalExpression
	 * @generated
	 */
	EClass getConditionalExpression();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.ConditionalExpression#getConditionParam <em>Condition Param</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Condition Param</em>'.
	 * @see zbr.test.condition.condition.ConditionalExpression#getConditionParam()
	 * @see #getConditionalExpression()
	 * @generated
	 */
	EReference getConditionalExpression_ConditionParam();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.ConditionalExpression#getCondition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Condition</em>'.
	 * @see zbr.test.condition.condition.ConditionalExpression#getCondition()
	 * @see #getConditionalExpression()
	 * @generated
	 */
	EReference getConditionalExpression_Condition();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.ConditionalExpression#getAftetrSymbol <em>Aftetr Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Aftetr Symbol</em>'.
	 * @see zbr.test.condition.condition.ConditionalExpression#getAftetrSymbol()
	 * @see #getConditionalExpression()
	 * @generated
	 */
	EReference getConditionalExpression_AftetrSymbol();

	/**
	 * Returns the meta object for the containment reference '{@link zbr.test.condition.condition.ConditionalExpression#getBeforeSymbol <em>Before Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the containment reference '<em>Before Symbol</em>'.
	 * @see zbr.test.condition.condition.ConditionalExpression#getBeforeSymbol()
	 * @see #getConditionalExpression()
	 * @generated
	 */
	EReference getConditionalExpression_BeforeSymbol();

	/**
	 * Returns the meta object for class '{@link zbr.test.condition.condition.LogicalOpeartor <em>Logical Opeartor</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for class '<em>Logical Opeartor</em>'.
	 * @see zbr.test.condition.condition.LogicalOpeartor
	 * @generated
	 */
	EClass getLogicalOpeartor();

	/**
	 * Returns the meta object for the attribute '{@link zbr.test.condition.condition.LogicalOpeartor#getSymbol <em>Symbol</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for the attribute '<em>Symbol</em>'.
	 * @see zbr.test.condition.condition.LogicalOpeartor#getSymbol()
	 * @see #getLogicalOpeartor()
	 * @generated
	 */
	EAttribute getLogicalOpeartor_Symbol();

	/**
	 * Returns the meta object for enum '{@link zbr.test.condition.condition.TimeUnit <em>Time Unit</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for enum '<em>Time Unit</em>'.
	 * @see zbr.test.condition.condition.TimeUnit
	 * @generated
	 */
	EEnum getTimeUnit();

	/**
	 * Returns the meta object for enum '{@link zbr.test.condition.condition.SessionStatus <em>Session Status</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for enum '<em>Session Status</em>'.
	 * @see zbr.test.condition.condition.SessionStatus
	 * @generated
	 */
	EEnum getSessionStatus();

	/**
	 * Returns the meta object for enum '{@link zbr.test.condition.condition.Operation <em>Operation</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for enum '<em>Operation</em>'.
	 * @see zbr.test.condition.condition.Operation
	 * @generated
	 */
	EEnum getOperation();

	/**
	 * Returns the meta object for enum '{@link zbr.test.condition.condition.WeekDay <em>Week Day</em>}'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the meta object for enum '<em>Week Day</em>'.
	 * @see zbr.test.condition.condition.WeekDay
	 * @generated
	 */
	EEnum getWeekDay();

	/**
	 * Returns the factory that creates the instances of the model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the factory that creates the instances of the model.
	 * @generated
	 */
	ConditionFactory getConditionFactory();

	/**
	 * <!-- begin-user-doc -->
	 * Defines literals for the meta objects that represent
	 * <ul>
	 *   <li>each class,</li>
	 *   <li>each feature of each class,</li>
	 *   <li>each enum,</li>
	 *   <li>and each data type</li>
	 * </ul>
	 * <!-- end-user-doc -->
	 * @generated
	 */
	interface Literals
	{
		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.ModelImpl <em>Model</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.ModelImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getModel()
		 * @generated
		 */
		EClass MODEL = eINSTANCE.getModel();

		/**
		 * The meta object literal for the '<em><b>Conditional Expression</b></em>' containment reference list feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference MODEL__CONDITIONAL_EXPRESSION = eINSTANCE.getModel_ConditionalExpression();

		/**
		 * The meta object literal for the '<em><b>Condition</b></em>' containment reference list feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference MODEL__CONDITION = eINSTANCE.getModel_Condition();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.ConditionImpl <em>Condition</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.ConditionImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getCondition()
		 * @generated
		 */
		EClass CONDITION = eINSTANCE.getCondition();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.UnaryTermOperatorImpl <em>Unary Term Operator</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.UnaryTermOperatorImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getUnaryTermOperator()
		 * @generated
		 */
		EClass UNARY_TERM_OPERATOR = eINSTANCE.getUnaryTermOperator();

		/**
		 * The meta object literal for the '<em><b>Symbol</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute UNARY_TERM_OPERATOR__SYMBOL = eINSTANCE.getUnaryTermOperator_Symbol();

		/**
		 * The meta object literal for the '<em><b>Condition</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference UNARY_TERM_OPERATOR__CONDITION = eINSTANCE.getUnaryTermOperator_Condition();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.BinaryTermOperatorImpl <em>Binary Term Operator</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.BinaryTermOperatorImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getBinaryTermOperator()
		 * @generated
		 */
		EClass BINARY_TERM_OPERATOR = eINSTANCE.getBinaryTermOperator();

		/**
		 * The meta object literal for the '<em><b>Symbol</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute BINARY_TERM_OPERATOR__SYMBOL = eINSTANCE.getBinaryTermOperator_Symbol();

		/**
		 * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference BINARY_TERM_OPERATOR__RIGHT = eINSTANCE.getBinaryTermOperator_Right();

		/**
		 * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference BINARY_TERM_OPERATOR__LEFT = eINSTANCE.getBinaryTermOperator_Left();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.TermImpl <em>Term</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.TermImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTerm()
		 * @generated
		 */
		EClass TERM = eINSTANCE.getTerm();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.CompositeConditionImpl <em>Composite Condition</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.CompositeConditionImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getCompositeCondition()
		 * @generated
		 */
		EClass COMPOSITE_CONDITION = eINSTANCE.getCompositeCondition();

		/**
		 * The meta object literal for the '<em><b>Conditions</b></em>' containment reference list feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference COMPOSITE_CONDITION__CONDITIONS = eINSTANCE.getCompositeCondition_Conditions();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.SessionIntervalImpl <em>Session Interval</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.SessionIntervalImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getSessionInterval()
		 * @generated
		 */
		EClass SESSION_INTERVAL = eINSTANCE.getSessionInterval();

		/**
		 * The meta object literal for the '<em><b>Frequency</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute SESSION_INTERVAL__FREQUENCY = eINSTANCE.getSessionInterval_Frequency();

		/**
		 * The meta object literal for the '<em><b>Time Unit</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute SESSION_INTERVAL__TIME_UNIT = eINSTANCE.getSessionInterval_TimeUnit();

		/**
		 * The meta object literal for the '<em><b>Messagecontent</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference SESSION_INTERVAL__MESSAGECONTENT = eINSTANCE.getSessionInterval_Messagecontent();

		/**
		 * The meta object literal for the '<em><b>Value</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute SESSION_INTERVAL__VALUE = eINSTANCE.getSessionInterval_Value();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.TimeIntervalImpl <em>Time Interval</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.TimeIntervalImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTimeInterval()
		 * @generated
		 */
		EClass TIME_INTERVAL = eINSTANCE.getTimeInterval();

		/**
		 * The meta object literal for the '<em><b>Start</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute TIME_INTERVAL__START = eINSTANCE.getTimeInterval_Start();

		/**
		 * The meta object literal for the '<em><b>End</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute TIME_INTERVAL__END = eINSTANCE.getTimeInterval_End();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.TimeoutImpl <em>Timeout</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.TimeoutImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTimeout()
		 * @generated
		 */
		EClass TIMEOUT = eINSTANCE.getTimeout();

		/**
		 * The meta object literal for the '<em><b>Value</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute TIMEOUT__VALUE = eINSTANCE.getTimeout_Value();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.WeekDaysIntervalImpl <em>Week Days Interval</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.WeekDaysIntervalImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getWeekDaysInterval()
		 * @generated
		 */
		EClass WEEK_DAYS_INTERVAL = eINSTANCE.getWeekDaysInterval();

		/**
		 * The meta object literal for the '<em><b>Start</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute WEEK_DAYS_INTERVAL__START = eINSTANCE.getWeekDaysInterval_Start();

		/**
		 * The meta object literal for the '<em><b>End</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute WEEK_DAYS_INTERVAL__END = eINSTANCE.getWeekDaysInterval_End();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.MaxNumberOfOperationImpl <em>Max Number Of Operation</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.MaxNumberOfOperationImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getMaxNumberOfOperation()
		 * @generated
		 */
		EClass MAX_NUMBER_OF_OPERATION = eINSTANCE.getMaxNumberOfOperation();

		/**
		 * The meta object literal for the '<em><b>Operations Number</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute MAX_NUMBER_OF_OPERATION__OPERATIONS_NUMBER = eINSTANCE.getMaxNumberOfOperation_OperationsNumber();

		/**
		 * The meta object literal for the '<em><b>Time Unit</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute MAX_NUMBER_OF_OPERATION__TIME_UNIT = eINSTANCE.getMaxNumberOfOperation_TimeUnit();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.MessageContentImpl <em>Message Content</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.MessageContentImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getMessageContent()
		 * @generated
		 */
		EClass MESSAGE_CONTENT = eINSTANCE.getMessageContent();

		/**
		 * The meta object literal for the '<em><b>Content</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute MESSAGE_CONTENT__CONTENT = eINSTANCE.getMessageContent_Content();

		/**
		 * The meta object literal for the '<em><b>Time Unit</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute MESSAGE_CONTENT__TIME_UNIT = eINSTANCE.getMessageContent_TimeUnit();

		/**
		 * The meta object literal for the '<em><b>Value</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute MESSAGE_CONTENT__VALUE = eINSTANCE.getMessageContent_Value();

		/**
		 * The meta object literal for the '<em><b>Comparison Operator</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference MESSAGE_CONTENT__COMPARISON_OPERATOR = eINSTANCE.getMessageContent_ComparisonOperator();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.ComparisonOperatorImpl <em>Comparison Operator</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.ComparisonOperatorImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getComparisonOperator()
		 * @generated
		 */
		EClass COMPARISON_OPERATOR = eINSTANCE.getComparisonOperator();

		/**
		 * The meta object literal for the '<em><b>Symbol</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute COMPARISON_OPERATOR__SYMBOL = eINSTANCE.getComparisonOperator_Symbol();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.ConditionalExpressionImpl <em>Conditional Expression</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.ConditionalExpressionImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getConditionalExpression()
		 * @generated
		 */
		EClass CONDITIONAL_EXPRESSION = eINSTANCE.getConditionalExpression();

		/**
		 * The meta object literal for the '<em><b>Condition Param</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference CONDITIONAL_EXPRESSION__CONDITION_PARAM = eINSTANCE.getConditionalExpression_ConditionParam();

		/**
		 * The meta object literal for the '<em><b>Condition</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference CONDITIONAL_EXPRESSION__CONDITION = eINSTANCE.getConditionalExpression_Condition();

		/**
		 * The meta object literal for the '<em><b>Aftetr Symbol</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference CONDITIONAL_EXPRESSION__AFTETR_SYMBOL = eINSTANCE.getConditionalExpression_AftetrSymbol();

		/**
		 * The meta object literal for the '<em><b>Before Symbol</b></em>' containment reference feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EReference CONDITIONAL_EXPRESSION__BEFORE_SYMBOL = eINSTANCE.getConditionalExpression_BeforeSymbol();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.impl.LogicalOpeartorImpl <em>Logical Opeartor</em>}' class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.impl.LogicalOpeartorImpl
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getLogicalOpeartor()
		 * @generated
		 */
		EClass LOGICAL_OPEARTOR = eINSTANCE.getLogicalOpeartor();

		/**
		 * The meta object literal for the '<em><b>Symbol</b></em>' attribute feature.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		EAttribute LOGICAL_OPEARTOR__SYMBOL = eINSTANCE.getLogicalOpeartor_Symbol();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.TimeUnit <em>Time Unit</em>}' enum.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.TimeUnit
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getTimeUnit()
		 * @generated
		 */
		EEnum TIME_UNIT = eINSTANCE.getTimeUnit();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.SessionStatus <em>Session Status</em>}' enum.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.SessionStatus
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getSessionStatus()
		 * @generated
		 */
		EEnum SESSION_STATUS = eINSTANCE.getSessionStatus();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.Operation <em>Operation</em>}' enum.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.Operation
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getOperation()
		 * @generated
		 */
		EEnum OPERATION = eINSTANCE.getOperation();

		/**
		 * The meta object literal for the '{@link zbr.test.condition.condition.WeekDay <em>Week Day</em>}' enum.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @see zbr.test.condition.condition.WeekDay
		 * @see zbr.test.condition.condition.impl.ConditionPackageImpl#getWeekDay()
		 * @generated
		 */
		EEnum WEEK_DAY = eINSTANCE.getWeekDay();

	}

} //ConditionPackage
