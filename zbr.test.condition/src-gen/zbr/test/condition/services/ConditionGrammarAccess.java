/*
 * generated by Xtext 2.28.0
 */
package zbr.test.condition.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ConditionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cConditionalExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalExpressionConditionalExpressionParserRuleCall_1_0 = (RuleCall)cConditionalExpressionAssignment_1.eContents().get(0);
		
		//Model:
		//    (condition += Condition |
		//    conditionalExpression+=ConditionalExpression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(condition += Condition |
		//conditionalExpression+=ConditionalExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//condition += Condition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_0() { return cConditionConditionParserRuleCall_0_0; }
		
		//conditionalExpression+=ConditionalExpression
		public Assignment getConditionalExpressionAssignment_1() { return cConditionalExpressionAssignment_1; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionConditionalExpressionParserRuleCall_1_0() { return cConditionalExpressionConditionalExpressionParserRuleCall_1_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBeforeSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBeforeSymbolLogicalOpeartorParserRuleCall_0_0 = (RuleCall)cBeforeSymbolAssignment_0.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionParamAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionParamConditionParserRuleCall_3_0 = (RuleCall)cConditionParamAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDoKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cConditionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConditionConditionParserRuleCall_7_0 = (RuleCall)cConditionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAftetrSymbolAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAftetrSymbolLogicalOpeartorParserRuleCall_9_0 = (RuleCall)cAftetrSymbolAssignment_9.eContents().get(0);
		
		//ConditionalExpression :
		//    (beforeSymbol = LogicalOpeartor)?
		//    'when' '('  conditionParam=Condition')' 'do' '{'
		//        condition=Condition
		//    '}'
		//    (aftetrSymbol = LogicalOpeartor)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(beforeSymbol = LogicalOpeartor)?
		//'when' '('  conditionParam=Condition')' 'do' '{'
		//    condition=Condition
		//'}'
		//(aftetrSymbol = LogicalOpeartor)?
		public Group getGroup() { return cGroup; }
		
		//(beforeSymbol = LogicalOpeartor)?
		public Assignment getBeforeSymbolAssignment_0() { return cBeforeSymbolAssignment_0; }
		
		//LogicalOpeartor
		public RuleCall getBeforeSymbolLogicalOpeartorParserRuleCall_0_0() { return cBeforeSymbolLogicalOpeartorParserRuleCall_0_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//conditionParam=Condition
		public Assignment getConditionParamAssignment_3() { return cConditionParamAssignment_3; }
		
		//Condition
		public RuleCall getConditionParamConditionParserRuleCall_3_0() { return cConditionParamConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'do'
		public Keyword getDoKeyword_5() { return cDoKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//condition=Condition
		public Assignment getConditionAssignment_7() { return cConditionAssignment_7; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_7_0() { return cConditionConditionParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
		
		//(aftetrSymbol = LogicalOpeartor)?
		public Assignment getAftetrSymbolAssignment_9() { return cAftetrSymbolAssignment_9; }
		
		//LogicalOpeartor
		public RuleCall getAftetrSymbolLogicalOpeartorParserRuleCall_9_0() { return cAftetrSymbolLogicalOpeartorParserRuleCall_9_0; }
	}
	public class LogicalOpeartorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.LogicalOpeartor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSymbolANDKeyword_0_0 = (Keyword)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSymbolORKeyword_1_0 = (Keyword)cSymbolAssignment_1.eContents().get(0);
		
		//LogicalOpeartor:
		//    symbol = "AND" | symbol="OR"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol = "AND" | symbol="OR"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//symbol = "AND"
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//"AND"
		public Keyword getSymbolANDKeyword_0_0() { return cSymbolANDKeyword_0_0; }
		
		//symbol="OR"
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//"OR"
		public Keyword getSymbolORKeyword_1_0() { return cSymbolORKeyword_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.Condition");
		private final RuleCall cCompositeConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//    CompositeCondition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositeCondition
		public RuleCall getCompositeConditionParserRuleCall() { return cCompositeConditionParserRuleCall; }
	}
	public class CompositeConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.CompositeCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryTermOperatorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cSymbolAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cSymbolANDKeyword_1_1_0_0 = (Keyword)cSymbolAssignment_1_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cSymbolORKeyword_1_1_1_0 = (Keyword)cSymbolAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CompositeCondition returns Condition:
		//    Negation ({BinaryTermOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Negation ({BinaryTermOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*
		public Group getGroup() { return cGroup; }
		
		//Negation
		public RuleCall getNegationParserRuleCall_0() { return cNegationParserRuleCall_0; }
		
		//({BinaryTermOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BinaryTermOperator.left=current}
		public Action getBinaryTermOperatorLeftAction_1_0() { return cBinaryTermOperatorLeftAction_1_0; }
		
		//(symbol='AND' | symbol='OR'  )
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//symbol='AND'
		public Assignment getSymbolAssignment_1_1_0() { return cSymbolAssignment_1_1_0; }
		
		//'AND'
		public Keyword getSymbolANDKeyword_1_1_0_0() { return cSymbolANDKeyword_1_1_0_0; }
		
		//symbol='OR'
		public Assignment getSymbolAssignment_1_1_1() { return cSymbolAssignment_1_1_1; }
		
		//'OR'
		public Keyword getSymbolORKeyword_1_1_1_0() { return cSymbolORKeyword_1_1_1_0; }
		
		//right=Negation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Negation
		public RuleCall getRightNegationParserRuleCall_1_2_0() { return cRightNegationParserRuleCall_1_2_0; }
	}
	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.Negation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryTermOperatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSymbolAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSymbolNOTKeyword_1_1_0 = (Keyword)cSymbolAssignment_1_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionTermParserRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		
		//Negation returns Condition:
		//    Term | {UnaryTermOperator} symbol='NOT' condition=Term;
		@Override public ParserRule getRule() { return rule; }
		
		//Term | {UnaryTermOperator} symbol='NOT' condition=Term
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//{UnaryTermOperator} symbol='NOT' condition=Term
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryTermOperator}
		public Action getUnaryTermOperatorAction_1_0() { return cUnaryTermOperatorAction_1_0; }
		
		//symbol='NOT'
		public Assignment getSymbolAssignment_1_1() { return cSymbolAssignment_1_1; }
		
		//'NOT'
		public Keyword getSymbolNOTKeyword_1_1_0() { return cSymbolNOTKeyword_1_1_0; }
		
		//condition=Term
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }
		
		//Term
		public RuleCall getConditionTermParserRuleCall_1_2_0() { return cConditionTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cSessionIntervalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWeekDaysIntervalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeIntervalParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTimeoutParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMaxNumberOfOperationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMessageContentParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Term returns Condition:
		//    '(' Condition ')' |
		//    SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Condition ')' |
		//SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Condition ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//SessionInterval
		public RuleCall getSessionIntervalParserRuleCall_1() { return cSessionIntervalParserRuleCall_1; }
		
		//WeekDaysInterval
		public RuleCall getWeekDaysIntervalParserRuleCall_2() { return cWeekDaysIntervalParserRuleCall_2; }
		
		//TimeInterval
		public RuleCall getTimeIntervalParserRuleCall_3() { return cTimeIntervalParserRuleCall_3; }
		
		//Timeout
		public RuleCall getTimeoutParserRuleCall_4() { return cTimeoutParserRuleCall_4; }
		
		//MaxNumberOfOperation
		public RuleCall getMaxNumberOfOperationParserRuleCall_5() { return cMaxNumberOfOperationParserRuleCall_5; }
		
		//MessageContent
		public RuleCall getMessageContentParserRuleCall_6() { return cMessageContentParserRuleCall_6; }
	}
	public class TimeIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.TimeInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeIntervalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartSTRINGTerminalRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndSTRINGTerminalRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimeInterval:
		//    'TimeInterval' '(' start=STRING 'to' end=STRING')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'TimeInterval' '(' start=STRING 'to' end=STRING')'
		public Group getGroup() { return cGroup; }
		
		//'TimeInterval'
		public Keyword getTimeIntervalKeyword_0() { return cTimeIntervalKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=STRING
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//STRING
		public RuleCall getStartSTRINGTerminalRuleCall_2_0() { return cStartSTRINGTerminalRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//end=STRING
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//STRING
		public RuleCall getEndSTRINGTerminalRuleCall_4_0() { return cEndSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SessionIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.SessionInterval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cSessionIntervalKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cFrequencyAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_0_0_2_0 = (RuleCall)cFrequencyAssignment_0_0_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_0_0_3_0 = (RuleCall)cTimeUnitAssignment_0_0_3.eContents().get(0);
		private final Keyword cByKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cMessagecontentAssignment_0_0_5 = (Assignment)cGroup_0_0.eContents().get(5);
		private final RuleCall cMessagecontentMessageContentParserRuleCall_0_0_5_0 = (RuleCall)cMessagecontentAssignment_0_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSessionIntervalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFrequencyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_1_2_0 = (RuleCall)cFrequencyAssignment_1_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_1_3_0 = (RuleCall)cTimeUnitAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cSessionIntervalKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cFrequencyAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cFrequencyINTTerminalRuleCall_2_0_2_0 = (RuleCall)cFrequencyAssignment_2_0_2.eContents().get(0);
		private final Assignment cTimeUnitAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_2_0_3_0 = (RuleCall)cTimeUnitAssignment_2_0_3.eContents().get(0);
		private final Keyword cByKeyword_2_0_4 = (Keyword)cGroup_2_0.eContents().get(4);
		private final Assignment cValueAssignment_2_0_5 = (Assignment)cGroup_2_0.eContents().get(5);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_5_0 = (RuleCall)cValueAssignment_2_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//SessionInterval:
		//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  ) ')'|
		//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit')') |
		//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' value=STRING  ) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  ) ')'|
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit')') |
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' value=STRING  ) ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  ) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  )
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'SessionInterval'
		public Keyword getSessionIntervalKeyword_0_0_0() { return cSessionIntervalKeyword_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0_1() { return cLeftParenthesisKeyword_0_0_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_0_0_2() { return cFrequencyAssignment_0_0_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_0_0_2_0() { return cFrequencyINTTerminalRuleCall_0_0_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_0_0_3() { return cTimeUnitAssignment_0_0_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_0_0_3_0() { return cTimeUnitTimeUnitEnumRuleCall_0_0_3_0; }
		
		//'by'
		public Keyword getByKeyword_0_0_4() { return cByKeyword_0_0_4; }
		
		//messagecontent=MessageContent
		public Assignment getMessagecontentAssignment_0_0_5() { return cMessagecontentAssignment_0_0_5; }
		
		//MessageContent
		public RuleCall getMessagecontentMessageContentParserRuleCall_0_0_5_0() { return cMessagecontentMessageContentParserRuleCall_0_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1() { return cRightParenthesisKeyword_0_1; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'SessionInterval'
		public Keyword getSessionIntervalKeyword_1_0() { return cSessionIntervalKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_1_2() { return cFrequencyAssignment_1_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_1_2_0() { return cFrequencyINTTerminalRuleCall_1_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_1_3() { return cTimeUnitAssignment_1_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_1_3_0() { return cTimeUnitTimeUnitEnumRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' value=STRING  ) ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' value=STRING  )
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'SessionInterval'
		public Keyword getSessionIntervalKeyword_2_0_0() { return cSessionIntervalKeyword_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_1() { return cLeftParenthesisKeyword_2_0_1; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_2_0_2() { return cFrequencyAssignment_2_0_2; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_2_0_2_0() { return cFrequencyINTTerminalRuleCall_2_0_2_0; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_2_0_3() { return cTimeUnitAssignment_2_0_3; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_2_0_3_0() { return cTimeUnitTimeUnitEnumRuleCall_2_0_3_0; }
		
		//'by'
		public Keyword getByKeyword_2_0_4() { return cByKeyword_2_0_4; }
		
		//value=STRING
		public Assignment getValueAssignment_2_0_5() { return cValueAssignment_2_0_5; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_5_0() { return cValueSTRINGTerminalRuleCall_2_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1() { return cRightParenthesisKeyword_2_1; }
	}
	public class TimeoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.Timeout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Timeout:
		//    'Timeout' '(' value=STRING ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Timeout' '(' value=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'Timeout'
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MaxNumberOfOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.MaxNumberOfOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxNumberOfOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperationsNumberAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperationsNumberINTTerminalRuleCall_2_0 = (RuleCall)cOperationsNumberAssignment_2.eContents().get(0);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_4_0 = (RuleCall)cTimeUnitAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MaxNumberOfOperation:
		//    'MaxNumberOfOperation' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MaxNumberOfOperation' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
		public Group getGroup() { return cGroup; }
		
		//'MaxNumberOfOperation'
		public Keyword getMaxNumberOfOperationKeyword_0() { return cMaxNumberOfOperationKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//operationsNumber=INT
		public Assignment getOperationsNumberAssignment_2() { return cOperationsNumberAssignment_2; }
		
		//INT
		public RuleCall getOperationsNumberINTTerminalRuleCall_2_0() { return cOperationsNumberINTTerminalRuleCall_2_0; }
		
		//'by'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_4() { return cTimeUnitAssignment_4; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_4_0() { return cTimeUnitTimeUnitEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class WeekDaysIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.WeekDaysInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeekDaysIntervalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartWeekDayEnumRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndWeekDayEnumRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WeekDaysInterval:
		//    ('WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')')
		public Group getGroup() { return cGroup; }
		
		//'WeekDaysInterval'
		public Keyword getWeekDaysIntervalKeyword_0() { return cWeekDaysIntervalKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//start=WeekDay
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }
		
		//WeekDay
		public RuleCall getStartWeekDayEnumRuleCall_2_0() { return cStartWeekDayEnumRuleCall_2_0; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//end=WeekDay
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//WeekDay
		public RuleCall getEndWeekDayEnumRuleCall_4_0() { return cEndWeekDayEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MessageContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.MessageContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMessageContentKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cContentAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cContentAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMessageContentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cContentAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cContentAssignment_1_2.eContents().get(0);
		private final Keyword cByKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cTimeUnitAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_1_4_0 = (RuleCall)cTimeUnitAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMessageContentKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cContentAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cContentAssignment_2_2.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_2_3_0 = (RuleCall)cComparisonOperatorAssignment_2_3.eContents().get(0);
		private final Assignment cValueAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_4_0 = (RuleCall)cValueAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMessageContentKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cContentAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cContentAssignment_3_2.eContents().get(0);
		private final Assignment cComparisonOperatorAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cComparisonOperatorComparisonOperatorParserRuleCall_3_3_0 = (RuleCall)cComparisonOperatorAssignment_3_3.eContents().get(0);
		private final Assignment cValueAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_4_0 = (RuleCall)cValueAssignment_3_4.eContents().get(0);
		private final Keyword cByKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cTimeUnitAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cTimeUnitTimeUnitEnumRuleCall_3_6_0 = (RuleCall)cTimeUnitAssignment_3_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_7 = (Keyword)cGroup_3.eContents().get(7);
		
		//MessageContent:
		//    ('MessageContent' '(' content=STRING ')') |
		//    ('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
		//    ('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING')' )|
		//    ('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING 'by' timeUnit=TimeUnit')' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('MessageContent' '(' content=STRING ')') |
		//('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
		//('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING')' )|
		//('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING 'by' timeUnit=TimeUnit')' )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('MessageContent' '(' content=STRING ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_0_0() { return cMessageContentKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//content=STRING
		public Assignment getContentAssignment_0_2() { return cContentAssignment_0_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_0_2_0() { return cContentSTRINGTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_1_0() { return cMessageContentKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//content=STRING
		public Assignment getContentAssignment_1_2() { return cContentAssignment_1_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_2_0() { return cContentSTRINGTerminalRuleCall_1_2_0; }
		
		//'by'
		public Keyword getByKeyword_1_3() { return cByKeyword_1_3; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_1_4() { return cTimeUnitAssignment_1_4; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_1_4_0() { return cTimeUnitTimeUnitEnumRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING')' )
		public Group getGroup_2() { return cGroup_2; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_2_0() { return cMessageContentKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2_2() { return cContentAssignment_2_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_2_0() { return cContentSTRINGTerminalRuleCall_2_2_0; }
		
		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_2_3() { return cComparisonOperatorAssignment_2_3; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_2_3_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_2_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_4() { return cValueAssignment_2_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_4_0() { return cValueSTRINGTerminalRuleCall_2_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING 'by' timeUnit=TimeUnit')' )
		public Group getGroup_3() { return cGroup_3; }
		
		//'MessageContent'
		public Keyword getMessageContentKeyword_3_0() { return cMessageContentKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//content=STRING
		public Assignment getContentAssignment_3_2() { return cContentAssignment_3_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_3_2_0() { return cContentSTRINGTerminalRuleCall_3_2_0; }
		
		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_3_3() { return cComparisonOperatorAssignment_3_3; }
		
		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorParserRuleCall_3_3_0() { return cComparisonOperatorComparisonOperatorParserRuleCall_3_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_4() { return cValueAssignment_3_4; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_4_0() { return cValueSTRINGTerminalRuleCall_3_4_0; }
		
		//'by'
		public Keyword getByKeyword_3_5() { return cByKeyword_3_5; }
		
		//timeUnit=TimeUnit
		public Assignment getTimeUnitAssignment_3_6() { return cTimeUnitAssignment_3_6; }
		
		//TimeUnit
		public RuleCall getTimeUnitTimeUnitEnumRuleCall_3_6_0() { return cTimeUnitTimeUnitEnumRuleCall_3_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_7() { return cRightParenthesisKeyword_3_7; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_0_0 = (Keyword)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cSymbolAssignment_1.eContents().get(0);
		private final Assignment cSymbolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSymbolGreaterThanSignKeyword_2_0 = (Keyword)cSymbolAssignment_2.eContents().get(0);
		private final Assignment cSymbolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cSymbolLessThanSignKeyword_3_0 = (Keyword)cSymbolAssignment_3.eContents().get(0);
		private final Assignment cSymbolAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSymbolExclamationMarkEqualsSignKeyword_4_0 = (Keyword)cSymbolAssignment_4.eContents().get(0);
		private final Assignment cSymbolAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cSymbolEqualsSignEqualsSignKeyword_5_0 = (Keyword)cSymbolAssignment_5.eContents().get(0);
		
		//ComparisonOperator:
		//    symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='    | symbol='=='
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='	| symbol='=='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//symbol='<='
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_0_0() { return cSymbolLessThanSignEqualsSignKeyword_0_0; }
		
		//symbol='>='
		public Assignment getSymbolAssignment_1() { return cSymbolAssignment_1; }
		
		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_0; }
		
		//symbol='>'
		public Assignment getSymbolAssignment_2() { return cSymbolAssignment_2; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_2_0() { return cSymbolGreaterThanSignKeyword_2_0; }
		
		//symbol='<'
		public Assignment getSymbolAssignment_3() { return cSymbolAssignment_3; }
		
		//'<'
		public Keyword getSymbolLessThanSignKeyword_3_0() { return cSymbolLessThanSignKeyword_3_0; }
		
		//symbol='!='
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//'!='
		public Keyword getSymbolExclamationMarkEqualsSignKeyword_4_0() { return cSymbolExclamationMarkEqualsSignKeyword_4_0; }
		
		//symbol='=='
		public Assignment getSymbolAssignment_5() { return cSymbolAssignment_5; }
		
		//'=='
		public Keyword getSymbolEqualsSignEqualsSignKeyword_5_0() { return cSymbolEqualsSignEqualsSignKeyword_5_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//    ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//    QualifiedName '.*';
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	public class WeekDayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.WeekDay");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUNDAYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUNDAYSundayKeyword_0_0 = (Keyword)cSUNDAYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMONDAYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMONDAYMondayKeyword_1_0 = (Keyword)cMONDAYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTUESDAYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTUESDAYTuesdayKeyword_2_0 = (Keyword)cTUESDAYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWEDNESDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWEDNESDAYWednesdayKeyword_3_0 = (Keyword)cWEDNESDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTHURSDAYEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTHURSDAYThursdayKeyword_4_0 = (Keyword)cTHURSDAYEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cFRIDAYEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cFRIDAYFridayKeyword_5_0 = (Keyword)cFRIDAYEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSATURDAYEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSATURDAYSaturdayKeyword_6_0 = (Keyword)cSATURDAYEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum WeekDay:
		//    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
		//;
		public EnumRule getRule() { return rule; }
		
		//SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUNDAY='Sunday'
		public EnumLiteralDeclaration getSUNDAYEnumLiteralDeclaration_0() { return cSUNDAYEnumLiteralDeclaration_0; }
		
		//'Sunday'
		public Keyword getSUNDAYSundayKeyword_0_0() { return cSUNDAYSundayKeyword_0_0; }
		
		//MONDAY='Monday'
		public EnumLiteralDeclaration getMONDAYEnumLiteralDeclaration_1() { return cMONDAYEnumLiteralDeclaration_1; }
		
		//'Monday'
		public Keyword getMONDAYMondayKeyword_1_0() { return cMONDAYMondayKeyword_1_0; }
		
		//TUESDAY='Tuesday'
		public EnumLiteralDeclaration getTUESDAYEnumLiteralDeclaration_2() { return cTUESDAYEnumLiteralDeclaration_2; }
		
		//'Tuesday'
		public Keyword getTUESDAYTuesdayKeyword_2_0() { return cTUESDAYTuesdayKeyword_2_0; }
		
		//WEDNESDAY = 'Wednesday'
		public EnumLiteralDeclaration getWEDNESDAYEnumLiteralDeclaration_3() { return cWEDNESDAYEnumLiteralDeclaration_3; }
		
		//'Wednesday'
		public Keyword getWEDNESDAYWednesdayKeyword_3_0() { return cWEDNESDAYWednesdayKeyword_3_0; }
		
		//THURSDAY='Thursday'
		public EnumLiteralDeclaration getTHURSDAYEnumLiteralDeclaration_4() { return cTHURSDAYEnumLiteralDeclaration_4; }
		
		//'Thursday'
		public Keyword getTHURSDAYThursdayKeyword_4_0() { return cTHURSDAYThursdayKeyword_4_0; }
		
		//FRIDAY='Friday'
		public EnumLiteralDeclaration getFRIDAYEnumLiteralDeclaration_5() { return cFRIDAYEnumLiteralDeclaration_5; }
		
		//'Friday'
		public Keyword getFRIDAYFridayKeyword_5_0() { return cFRIDAYFridayKeyword_5_0; }
		
		//SATURDAY='Saturday'
		public EnumLiteralDeclaration getSATURDAYEnumLiteralDeclaration_6() { return cSATURDAYEnumLiteralDeclaration_6; }
		
		//'Saturday'
		public Keyword getSATURDAYSaturdayKeyword_6_0() { return cSATURDAYSaturdayKeyword_6_0; }
	}
	public class TimeUnitElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "zbr.test.condition.Condition.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSecondKeyword_0_0 = (Keyword)cSECONDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTEMinuteKeyword_1_0 = (Keyword)cMINUTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOUREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURHourKeyword_2_0 = (Keyword)cHOUREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYDayKeyword_3_0 = (Keyword)cDAYEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEEKWeekKeyword_4_0 = (Keyword)cWEEKEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMONTHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMONTHMonthKeyword_5_0 = (Keyword)cMONTHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cYEAREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cYEARYearKeyword_6_0 = (Keyword)cYEAREnumLiteralDeclaration_6.eContents().get(0);
		
		//enum TimeUnit:
		//    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
		//;
		public EnumRule getRule() { return rule; }
		
		//SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECOND='Second'
		public EnumLiteralDeclaration getSECONDEnumLiteralDeclaration_0() { return cSECONDEnumLiteralDeclaration_0; }
		
		//'Second'
		public Keyword getSECONDSecondKeyword_0_0() { return cSECONDSecondKeyword_0_0; }
		
		//MINUTE='Minute'
		public EnumLiteralDeclaration getMINUTEEnumLiteralDeclaration_1() { return cMINUTEEnumLiteralDeclaration_1; }
		
		//'Minute'
		public Keyword getMINUTEMinuteKeyword_1_0() { return cMINUTEMinuteKeyword_1_0; }
		
		//HOUR = 'Hour'
		public EnumLiteralDeclaration getHOUREnumLiteralDeclaration_2() { return cHOUREnumLiteralDeclaration_2; }
		
		//'Hour'
		public Keyword getHOURHourKeyword_2_0() { return cHOURHourKeyword_2_0; }
		
		//DAY='Day'
		public EnumLiteralDeclaration getDAYEnumLiteralDeclaration_3() { return cDAYEnumLiteralDeclaration_3; }
		
		//'Day'
		public Keyword getDAYDayKeyword_3_0() { return cDAYDayKeyword_3_0; }
		
		//WEEK='Week'
		public EnumLiteralDeclaration getWEEKEnumLiteralDeclaration_4() { return cWEEKEnumLiteralDeclaration_4; }
		
		//'Week'
		public Keyword getWEEKWeekKeyword_4_0() { return cWEEKWeekKeyword_4_0; }
		
		//MONTH='Month'
		public EnumLiteralDeclaration getMONTHEnumLiteralDeclaration_5() { return cMONTHEnumLiteralDeclaration_5; }
		
		//'Month'
		public Keyword getMONTHMonthKeyword_5_0() { return cMONTHMonthKeyword_5_0; }
		
		//YEAR='Year'
		public EnumLiteralDeclaration getYEAREnumLiteralDeclaration_6() { return cYEAREnumLiteralDeclaration_6; }
		
		//'Year'
		public Keyword getYEARYearKeyword_6_0() { return cYEARYearKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final ConditionalExpressionElements pConditionalExpression;
	private final LogicalOpeartorElements pLogicalOpeartor;
	private final ConditionElements pCondition;
	private final CompositeConditionElements pCompositeCondition;
	private final NegationElements pNegation;
	private final TermElements pTerm;
	private final TimeIntervalElements pTimeInterval;
	private final SessionIntervalElements pSessionInterval;
	private final TimeoutElements pTimeout;
	private final MaxNumberOfOperationElements pMaxNumberOfOperation;
	private final WeekDaysIntervalElements pWeekDaysInterval;
	private final MessageContentElements pMessageContent;
	private final ComparisonOperatorElements pComparisonOperator;
	private final WeekDayElements eWeekDay;
	private final TimeUnitElements eTimeUnit;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ConditionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pLogicalOpeartor = new LogicalOpeartorElements();
		this.pCondition = new ConditionElements();
		this.pCompositeCondition = new CompositeConditionElements();
		this.pNegation = new NegationElements();
		this.pTerm = new TermElements();
		this.pTimeInterval = new TimeIntervalElements();
		this.pSessionInterval = new SessionIntervalElements();
		this.pTimeout = new TimeoutElements();
		this.pMaxNumberOfOperation = new MaxNumberOfOperationElements();
		this.pWeekDaysInterval = new WeekDaysIntervalElements();
		this.pMessageContent = new MessageContentElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
		this.eWeekDay = new WeekDayElements();
		this.eTimeUnit = new TimeUnitElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("zbr.test.condition.Condition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    (condition += Condition |
	//    conditionalExpression+=ConditionalExpression)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ConditionalExpression :
	//    (beforeSymbol = LogicalOpeartor)?
	//    'when' '('  conditionParam=Condition')' 'do' '{'
	//        condition=Condition
	//    '}'
	//    (aftetrSymbol = LogicalOpeartor)?
	//;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//LogicalOpeartor:
	//    symbol = "AND" | symbol="OR"
	//;
	public LogicalOpeartorElements getLogicalOpeartorAccess() {
		return pLogicalOpeartor;
	}
	
	public ParserRule getLogicalOpeartorRule() {
		return getLogicalOpeartorAccess().getRule();
	}
	
	//Condition:
	//    CompositeCondition
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//CompositeCondition returns Condition:
	//    Negation ({BinaryTermOperator.left=current} (symbol='AND' | symbol='OR'  ) right=Negation)*;
	public CompositeConditionElements getCompositeConditionAccess() {
		return pCompositeCondition;
	}
	
	public ParserRule getCompositeConditionRule() {
		return getCompositeConditionAccess().getRule();
	}
	
	//Negation returns Condition:
	//    Term | {UnaryTermOperator} symbol='NOT' condition=Term;
	public NegationElements getNegationAccess() {
		return pNegation;
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}
	
	//Term returns Condition:
	//    '(' Condition ')' |
	//    SessionInterval | WeekDaysInterval | TimeInterval | Timeout | MaxNumberOfOperation | MessageContent
	//;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	//TimeInterval:
	//    'TimeInterval' '(' start=STRING 'to' end=STRING')'
	//;
	public TimeIntervalElements getTimeIntervalAccess() {
		return pTimeInterval;
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}
	
	//SessionInterval:
	//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' messagecontent=MessageContent  ) ')'|
	//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit')') |
	//    ('SessionInterval' '('frequency=INT timeUnit=TimeUnit 'by' value=STRING  ) ')'
	//;
	public SessionIntervalElements getSessionIntervalAccess() {
		return pSessionInterval;
	}
	
	public ParserRule getSessionIntervalRule() {
		return getSessionIntervalAccess().getRule();
	}
	
	//Timeout:
	//    'Timeout' '(' value=STRING ')'
	//;
	public TimeoutElements getTimeoutAccess() {
		return pTimeout;
	}
	
	public ParserRule getTimeoutRule() {
		return getTimeoutAccess().getRule();
	}
	
	//MaxNumberOfOperation:
	//    'MaxNumberOfOperation' '(' operationsNumber=INT 'by' timeUnit=TimeUnit  ')'
	//;
	public MaxNumberOfOperationElements getMaxNumberOfOperationAccess() {
		return pMaxNumberOfOperation;
	}
	
	public ParserRule getMaxNumberOfOperationRule() {
		return getMaxNumberOfOperationAccess().getRule();
	}
	
	//WeekDaysInterval:
	//    ('WeekDaysInterval' '(' start=WeekDay 'to' end=WeekDay ')')
	//;
	public WeekDaysIntervalElements getWeekDaysIntervalAccess() {
		return pWeekDaysInterval;
	}
	
	public ParserRule getWeekDaysIntervalRule() {
		return getWeekDaysIntervalAccess().getRule();
	}
	
	//MessageContent:
	//    ('MessageContent' '(' content=STRING ')') |
	//    ('MessageContent' '(' content=STRING 'by' timeUnit=TimeUnit')') |
	//    ('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING')' )|
	//    ('MessageContent' '(' content=STRING comparisonOperator=ComparisonOperator value=STRING 'by' timeUnit=TimeUnit')' )
	//;
	public MessageContentElements getMessageContentAccess() {
		return pMessageContent;
	}
	
	public ParserRule getMessageContentRule() {
		return getMessageContentAccess().getRule();
	}
	
	//ComparisonOperator:
	//    symbol='<=' | symbol='>=' | symbol='>' | symbol='<' | symbol='!='    | symbol='=='
	//;
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//enum WeekDay:
	//    SUNDAY='Sunday' | MONDAY='Monday' | TUESDAY='Tuesday' | WEDNESDAY = 'Wednesday' | THURSDAY='Thursday' | FRIDAY='Friday' | SATURDAY='Saturday'
	//;
	public WeekDayElements getWeekDayAccess() {
		return eWeekDay;
	}
	
	public EnumRule getWeekDayRule() {
		return getWeekDayAccess().getRule();
	}
	
	//enum TimeUnit:
	//    SECOND='Second' |  MINUTE='Minute' | HOUR = 'Hour' |  DAY='Day' | WEEK='Week' | MONTH='Month' | YEAR='Year'
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return eTimeUnit;
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//QualifiedName:
	//    ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//    QualifiedName '.*';
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
