/*
 * generated by Xtext 2.28.0
 */
grammar InternalCondition;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package zbr.test.condition.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package zbr.test.condition.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import zbr.test.condition.services.ConditionGrammarAccess;

}

@parser::members {

 	private ConditionGrammarAccess grammarAccess;

    public InternalConditionParser(TokenStream input, ConditionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ConditionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConditionConditionParserRuleCall_0_0());
				}
				lv_condition_0_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"condition",
						lv_condition_0_0,
						"zbr.test.condition.Condition.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getConditionalExpressionConditionalExpressionParserRuleCall_1_0());
				}
				lv_conditionalExpression_1_0=ruleConditionalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"conditionalExpression",
						lv_conditionalExpression_1_0,
						"zbr.test.condition.Condition.ConditionalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleConditionalExpression
entryRuleConditionalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalExpressionRule()); }
	iv_ruleConditionalExpression=ruleConditionalExpression
	{ $current=$iv_ruleConditionalExpression.current; }
	EOF;

// Rule ConditionalExpression
ruleConditionalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getBeforeSymbolLogicalOpeartorParserRuleCall_0_0());
				}
				lv_beforeSymbol_0_0=ruleLogicalOpeartor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"beforeSymbol",
						lv_beforeSymbol_0_0,
						"zbr.test.condition.Condition.LogicalOpeartor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='when'
		{
			newLeafNode(otherlv_1, grammarAccess.getConditionalExpressionAccess().getWhenKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getConditionalExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getConditionParamConditionParserRuleCall_3_0());
				}
				lv_conditionParam_3_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"conditionParam",
						lv_conditionParam_3_0,
						"zbr.test.condition.Condition.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalExpressionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='do'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalExpressionAccess().getDoKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionalExpressionAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getConditionConditionParserRuleCall_7_0());
				}
				lv_condition_7_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_7_0,
						"zbr.test.condition.Condition.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getConditionalExpressionAccess().getRightCurlyBracketKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalExpressionAccess().getAftetrSymbolLogicalOpeartorParserRuleCall_9_0());
				}
				lv_aftetrSymbol_9_0=ruleLogicalOpeartor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalExpressionRule());
					}
					set(
						$current,
						"aftetrSymbol",
						lv_aftetrSymbol_9_0,
						"zbr.test.condition.Condition.LogicalOpeartor");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleLogicalOpeartor
entryRuleLogicalOpeartor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOpeartorRule()); }
	iv_ruleLogicalOpeartor=ruleLogicalOpeartor
	{ $current=$iv_ruleLogicalOpeartor.current; }
	EOF;

// Rule LogicalOpeartor
ruleLogicalOpeartor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_symbol_0_0='AND'
				{
					newLeafNode(lv_symbol_0_0, grammarAccess.getLogicalOpeartorAccess().getSymbolANDKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOpeartorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_0, "AND");
				}
			)
		)
		    |
		(
			(
				lv_symbol_1_0='OR'
				{
					newLeafNode(lv_symbol_1_0, grammarAccess.getLogicalOpeartorAccess().getSymbolORKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLogicalOpeartorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_1_0, "OR");
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConditionAccess().getCompositeConditionParserRuleCall());
	}
	this_CompositeCondition_0=ruleCompositeCondition
	{
		$current = $this_CompositeCondition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCompositeCondition
entryRuleCompositeCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeConditionRule()); }
	iv_ruleCompositeCondition=ruleCompositeCondition
	{ $current=$iv_ruleCompositeCondition.current; }
	EOF;

// Rule CompositeCondition
ruleCompositeCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompositeConditionAccess().getNegationParserRuleCall_0());
		}
		this_Negation_0=ruleNegation
		{
			$current = $this_Negation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompositeConditionAccess().getBinaryTermOperatorLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_symbol_2_0='AND'
						{
							newLeafNode(lv_symbol_2_0, grammarAccess.getCompositeConditionAccess().getSymbolANDKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompositeConditionRule());
							}
							setWithLastConsumed($current, "symbol", lv_symbol_2_0, "AND");
						}
					)
				)
				    |
				(
					(
						lv_symbol_3_0='OR'
						{
							newLeafNode(lv_symbol_3_0, grammarAccess.getCompositeConditionAccess().getSymbolORKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompositeConditionRule());
							}
							setWithLastConsumed($current, "symbol", lv_symbol_3_0, "OR");
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompositeConditionAccess().getRightNegationParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleNegation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompositeConditionRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"zbr.test.condition.Condition.Negation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	iv_ruleNegation=ruleNegation
	{ $current=$iv_ruleNegation.current; }
	EOF;

// Rule Negation
ruleNegation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNegationAccess().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getNegationAccess().getUnaryTermOperatorAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_symbol_2_0='NOT'
					{
						newLeafNode(lv_symbol_2_0, grammarAccess.getNegationAccess().getSymbolNOTKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNegationRule());
						}
						setWithLastConsumed($current, "symbol", lv_symbol_2_0, "NOT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getNegationAccess().getConditionTermParserRuleCall_1_2_0());
					}
					lv_condition_3_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNegationRule());
						}
						set(
							$current,
							"condition",
							lv_condition_3_0,
							"zbr.test.condition.Condition.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTermAccess().getConditionParserRuleCall_0_1());
			}
			this_Condition_1=ruleCondition
			{
				$current = $this_Condition_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getTermAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getSessionIntervalParserRuleCall_1());
		}
		this_SessionInterval_3=ruleSessionInterval
		{
			$current = $this_SessionInterval_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getWeekDaysIntervalParserRuleCall_2());
		}
		this_WeekDaysInterval_4=ruleWeekDaysInterval
		{
			$current = $this_WeekDaysInterval_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getTimeIntervalParserRuleCall_3());
		}
		this_TimeInterval_5=ruleTimeInterval
		{
			$current = $this_TimeInterval_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getTimeoutParserRuleCall_4());
		}
		this_Timeout_6=ruleTimeout
		{
			$current = $this_Timeout_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getMaxNumberOfOperationParserRuleCall_5());
		}
		this_MaxNumberOfOperation_7=ruleMaxNumberOfOperation
		{
			$current = $this_MaxNumberOfOperation_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getMessageContentParserRuleCall_6());
		}
		this_MessageContent_8=ruleMessageContent
		{
			$current = $this_MessageContent_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTimeInterval
entryRuleTimeInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeIntervalRule()); }
	iv_ruleTimeInterval=ruleTimeInterval
	{ $current=$iv_ruleTimeInterval.current; }
	EOF;

// Rule TimeInterval
ruleTimeInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TimeInterval'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeIntervalAccess().getTimeIntervalKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeIntervalAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_start_2_0=RULE_STRING
				{
					newLeafNode(lv_start_2_0, grammarAccess.getTimeIntervalAccess().getStartSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeIntervalRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getTimeIntervalAccess().getToKeyword_3());
		}
		(
			(
				lv_end_4_0=RULE_STRING
				{
					newLeafNode(lv_end_4_0, grammarAccess.getTimeIntervalAccess().getEndSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeIntervalRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeIntervalAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSessionInterval
entryRuleSessionInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSessionIntervalRule()); }
	iv_ruleSessionInterval=ruleSessionInterval
	{ $current=$iv_ruleSessionInterval.current; }
	EOF;

// Rule SessionInterval
ruleSessionInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='SessionInterval'
				{
					newLeafNode(otherlv_0, grammarAccess.getSessionIntervalAccess().getSessionIntervalKeyword_0_0_0());
				}
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getSessionIntervalAccess().getLeftParenthesisKeyword_0_0_1());
				}
				(
					(
						lv_frequency_2_0=RULE_INT
						{
							newLeafNode(lv_frequency_2_0, grammarAccess.getSessionIntervalAccess().getFrequencyINTTerminalRuleCall_0_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSessionIntervalRule());
							}
							setWithLastConsumed(
								$current,
								"frequency",
								lv_frequency_2_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSessionIntervalAccess().getTimeUnitTimeUnitEnumRuleCall_0_0_3_0());
						}
						lv_timeUnit_3_0=ruleTimeUnit
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSessionIntervalRule());
							}
							set(
								$current,
								"timeUnit",
								lv_timeUnit_3_0,
								"zbr.test.condition.Condition.TimeUnit");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4='by'
				{
					newLeafNode(otherlv_4, grammarAccess.getSessionIntervalAccess().getByKeyword_0_0_4());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSessionIntervalAccess().getMessagecontentMessageContentParserRuleCall_0_0_5_0());
						}
						lv_messagecontent_5_0=ruleMessageContent
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSessionIntervalRule());
							}
							set(
								$current,
								"messagecontent",
								lv_messagecontent_5_0,
								"zbr.test.condition.Condition.MessageContent");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getSessionIntervalAccess().getRightParenthesisKeyword_0_1());
			}
		)
		    |
		(
			otherlv_7='SessionInterval'
			{
				newLeafNode(otherlv_7, grammarAccess.getSessionIntervalAccess().getSessionIntervalKeyword_1_0());
			}
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getSessionIntervalAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					lv_frequency_9_0=RULE_INT
					{
						newLeafNode(lv_frequency_9_0, grammarAccess.getSessionIntervalAccess().getFrequencyINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSessionIntervalRule());
						}
						setWithLastConsumed(
							$current,
							"frequency",
							lv_frequency_9_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSessionIntervalAccess().getTimeUnitTimeUnitEnumRuleCall_1_3_0());
					}
					lv_timeUnit_10_0=ruleTimeUnit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSessionIntervalRule());
						}
						set(
							$current,
							"timeUnit",
							lv_timeUnit_10_0,
							"zbr.test.condition.Condition.TimeUnit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getSessionIntervalAccess().getRightParenthesisKeyword_1_4());
			}
		)
		    |
		(
			(
				otherlv_12='SessionInterval'
				{
					newLeafNode(otherlv_12, grammarAccess.getSessionIntervalAccess().getSessionIntervalKeyword_2_0_0());
				}
				otherlv_13='('
				{
					newLeafNode(otherlv_13, grammarAccess.getSessionIntervalAccess().getLeftParenthesisKeyword_2_0_1());
				}
				(
					(
						lv_frequency_14_0=RULE_INT
						{
							newLeafNode(lv_frequency_14_0, grammarAccess.getSessionIntervalAccess().getFrequencyINTTerminalRuleCall_2_0_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSessionIntervalRule());
							}
							setWithLastConsumed(
								$current,
								"frequency",
								lv_frequency_14_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSessionIntervalAccess().getTimeUnitTimeUnitEnumRuleCall_2_0_3_0());
						}
						lv_timeUnit_15_0=ruleTimeUnit
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSessionIntervalRule());
							}
							set(
								$current,
								"timeUnit",
								lv_timeUnit_15_0,
								"zbr.test.condition.Condition.TimeUnit");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_16='by'
				{
					newLeafNode(otherlv_16, grammarAccess.getSessionIntervalAccess().getByKeyword_2_0_4());
				}
				(
					(
						lv_value_17_0=RULE_STRING
						{
							newLeafNode(lv_value_17_0, grammarAccess.getSessionIntervalAccess().getValueSTRINGTerminalRuleCall_2_0_5_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSessionIntervalRule());
							}
							setWithLastConsumed(
								$current,
								"value",
								lv_value_17_0,
								"org.eclipse.xtext.common.Terminals.STRING");
						}
					)
				)
			)
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getSessionIntervalAccess().getRightParenthesisKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleTimeout
entryRuleTimeout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeoutRule()); }
	iv_ruleTimeout=ruleTimeout
	{ $current=$iv_ruleTimeout.current; }
	EOF;

// Rule Timeout
ruleTimeout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Timeout'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeoutAccess().getTimeoutKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeoutAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getTimeoutAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeoutRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTimeoutAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleMaxNumberOfOperation
entryRuleMaxNumberOfOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaxNumberOfOperationRule()); }
	iv_ruleMaxNumberOfOperation=ruleMaxNumberOfOperation
	{ $current=$iv_ruleMaxNumberOfOperation.current; }
	EOF;

// Rule MaxNumberOfOperation
ruleMaxNumberOfOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MaxNumberOfOperation'
		{
			newLeafNode(otherlv_0, grammarAccess.getMaxNumberOfOperationAccess().getMaxNumberOfOperationKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMaxNumberOfOperationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_operationsNumber_2_0=RULE_INT
				{
					newLeafNode(lv_operationsNumber_2_0, grammarAccess.getMaxNumberOfOperationAccess().getOperationsNumberINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMaxNumberOfOperationRule());
					}
					setWithLastConsumed(
						$current,
						"operationsNumber",
						lv_operationsNumber_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3='by'
		{
			newLeafNode(otherlv_3, grammarAccess.getMaxNumberOfOperationAccess().getByKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMaxNumberOfOperationAccess().getTimeUnitTimeUnitEnumRuleCall_4_0());
				}
				lv_timeUnit_4_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMaxNumberOfOperationRule());
					}
					set(
						$current,
						"timeUnit",
						lv_timeUnit_4_0,
						"zbr.test.condition.Condition.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMaxNumberOfOperationAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleWeekDaysInterval
entryRuleWeekDaysInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWeekDaysIntervalRule()); }
	iv_ruleWeekDaysInterval=ruleWeekDaysInterval
	{ $current=$iv_ruleWeekDaysInterval.current; }
	EOF;

// Rule WeekDaysInterval
ruleWeekDaysInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WeekDaysInterval'
		{
			newLeafNode(otherlv_0, grammarAccess.getWeekDaysIntervalAccess().getWeekDaysIntervalKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWeekDaysIntervalAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWeekDaysIntervalAccess().getStartWeekDayEnumRuleCall_2_0());
				}
				lv_start_2_0=ruleWeekDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWeekDaysIntervalRule());
					}
					set(
						$current,
						"start",
						lv_start_2_0,
						"zbr.test.condition.Condition.WeekDay");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getWeekDaysIntervalAccess().getToKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWeekDaysIntervalAccess().getEndWeekDayEnumRuleCall_4_0());
				}
				lv_end_4_0=ruleWeekDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWeekDaysIntervalRule());
					}
					set(
						$current,
						"end",
						lv_end_4_0,
						"zbr.test.condition.Condition.WeekDay");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getWeekDaysIntervalAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleMessageContent
entryRuleMessageContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageContentRule()); }
	iv_ruleMessageContent=ruleMessageContent
	{ $current=$iv_ruleMessageContent.current; }
	EOF;

// Rule MessageContent
ruleMessageContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='MessageContent'
			{
				newLeafNode(otherlv_0, grammarAccess.getMessageContentAccess().getMessageContentKeyword_0_0());
			}
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getMessageContentAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					lv_content_2_0=RULE_STRING
					{
						newLeafNode(lv_content_2_0, grammarAccess.getMessageContentAccess().getContentSTRINGTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageContentRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getMessageContentAccess().getRightParenthesisKeyword_0_3());
			}
		)
		    |
		(
			otherlv_4='MessageContent'
			{
				newLeafNode(otherlv_4, grammarAccess.getMessageContentAccess().getMessageContentKeyword_1_0());
			}
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getMessageContentAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					lv_content_6_0=RULE_STRING
					{
						newLeafNode(lv_content_6_0, grammarAccess.getMessageContentAccess().getContentSTRINGTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageContentRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_6_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_7='by'
			{
				newLeafNode(otherlv_7, grammarAccess.getMessageContentAccess().getByKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMessageContentAccess().getTimeUnitTimeUnitEnumRuleCall_1_4_0());
					}
					lv_timeUnit_8_0=ruleTimeUnit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMessageContentRule());
						}
						set(
							$current,
							"timeUnit",
							lv_timeUnit_8_0,
							"zbr.test.condition.Condition.TimeUnit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getMessageContentAccess().getRightParenthesisKeyword_1_5());
			}
		)
		    |
		(
			otherlv_10='MessageContent'
			{
				newLeafNode(otherlv_10, grammarAccess.getMessageContentAccess().getMessageContentKeyword_2_0());
			}
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getMessageContentAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					lv_content_12_0=RULE_STRING
					{
						newLeafNode(lv_content_12_0, grammarAccess.getMessageContentAccess().getContentSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageContentRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_12_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMessageContentAccess().getComparisonOperatorComparisonOperatorParserRuleCall_2_3_0());
					}
					lv_comparisonOperator_13_0=ruleComparisonOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMessageContentRule());
						}
						set(
							$current,
							"comparisonOperator",
							lv_comparisonOperator_13_0,
							"zbr.test.condition.Condition.ComparisonOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_value_14_0=RULE_STRING
					{
						newLeafNode(lv_value_14_0, grammarAccess.getMessageContentAccess().getValueSTRINGTerminalRuleCall_2_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageContentRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_14_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_15=')'
			{
				newLeafNode(otherlv_15, grammarAccess.getMessageContentAccess().getRightParenthesisKeyword_2_5());
			}
		)
		    |
		(
			otherlv_16='MessageContent'
			{
				newLeafNode(otherlv_16, grammarAccess.getMessageContentAccess().getMessageContentKeyword_3_0());
			}
			otherlv_17='('
			{
				newLeafNode(otherlv_17, grammarAccess.getMessageContentAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					lv_content_18_0=RULE_STRING
					{
						newLeafNode(lv_content_18_0, grammarAccess.getMessageContentAccess().getContentSTRINGTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageContentRule());
						}
						setWithLastConsumed(
							$current,
							"content",
							lv_content_18_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMessageContentAccess().getComparisonOperatorComparisonOperatorParserRuleCall_3_3_0());
					}
					lv_comparisonOperator_19_0=ruleComparisonOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMessageContentRule());
						}
						set(
							$current,
							"comparisonOperator",
							lv_comparisonOperator_19_0,
							"zbr.test.condition.Condition.ComparisonOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_value_20_0=RULE_STRING
					{
						newLeafNode(lv_value_20_0, grammarAccess.getMessageContentAccess().getValueSTRINGTerminalRuleCall_3_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMessageContentRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_20_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_21='by'
			{
				newLeafNode(otherlv_21, grammarAccess.getMessageContentAccess().getByKeyword_3_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMessageContentAccess().getTimeUnitTimeUnitEnumRuleCall_3_6_0());
					}
					lv_timeUnit_22_0=ruleTimeUnit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMessageContentRule());
						}
						set(
							$current,
							"timeUnit",
							lv_timeUnit_22_0,
							"zbr.test.condition.Condition.TimeUnit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_23=')'
			{
				newLeafNode(otherlv_23, grammarAccess.getMessageContentAccess().getRightParenthesisKeyword_3_7());
			}
		)
	)
;

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); }
	iv_ruleComparisonOperator=ruleComparisonOperator
	{ $current=$iv_ruleComparisonOperator.current; }
	EOF;

// Rule ComparisonOperator
ruleComparisonOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_symbol_0_0='<='
				{
					newLeafNode(lv_symbol_0_0, grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_0_0, "<=");
				}
			)
		)
		    |
		(
			(
				lv_symbol_1_0='>='
				{
					newLeafNode(lv_symbol_1_0, grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignEqualsSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_1_0, ">=");
				}
			)
		)
		    |
		(
			(
				lv_symbol_2_0='>'
				{
					newLeafNode(lv_symbol_2_0, grammarAccess.getComparisonOperatorAccess().getSymbolGreaterThanSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_2_0, ">");
				}
			)
		)
		    |
		(
			(
				lv_symbol_3_0='<'
				{
					newLeafNode(lv_symbol_3_0, grammarAccess.getComparisonOperatorAccess().getSymbolLessThanSignKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_3_0, "<");
				}
			)
		)
		    |
		(
			(
				lv_symbol_4_0='!='
				{
					newLeafNode(lv_symbol_4_0, grammarAccess.getComparisonOperatorAccess().getSymbolExclamationMarkEqualsSignKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_4_0, "!=");
				}
			)
		)
		    |
		(
			(
				lv_symbol_5_0='=='
				{
					newLeafNode(lv_symbol_5_0, grammarAccess.getComparisonOperatorAccess().getSymbolEqualsSignEqualsSignKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "symbol", lv_symbol_5_0, "==");
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Rule WeekDay
ruleWeekDay returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Sunday'
			{
				$current = grammarAccess.getWeekDayAccess().getSUNDAYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getWeekDayAccess().getSUNDAYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Monday'
			{
				$current = grammarAccess.getWeekDayAccess().getMONDAYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getWeekDayAccess().getMONDAYEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Tuesday'
			{
				$current = grammarAccess.getWeekDayAccess().getTUESDAYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getWeekDayAccess().getTUESDAYEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Wednesday'
			{
				$current = grammarAccess.getWeekDayAccess().getWEDNESDAYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getWeekDayAccess().getWEDNESDAYEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Thursday'
			{
				$current = grammarAccess.getWeekDayAccess().getTHURSDAYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getWeekDayAccess().getTHURSDAYEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Friday'
			{
				$current = grammarAccess.getWeekDayAccess().getFRIDAYEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getWeekDayAccess().getFRIDAYEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Saturday'
			{
				$current = grammarAccess.getWeekDayAccess().getSATURDAYEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getWeekDayAccess().getSATURDAYEnumLiteralDeclaration_6());
			}
		)
	)
;

// Rule TimeUnit
ruleTimeUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Second'
			{
				$current = grammarAccess.getTimeUnitAccess().getSECONDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTimeUnitAccess().getSECONDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Minute'
			{
				$current = grammarAccess.getTimeUnitAccess().getMINUTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTimeUnitAccess().getMINUTEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Hour'
			{
				$current = grammarAccess.getTimeUnitAccess().getHOUREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTimeUnitAccess().getHOUREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Day'
			{
				$current = grammarAccess.getTimeUnitAccess().getDAYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTimeUnitAccess().getDAYEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Week'
			{
				$current = grammarAccess.getTimeUnitAccess().getWEEKEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTimeUnitAccess().getWEEKEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Month'
			{
				$current = grammarAccess.getTimeUnitAccess().getMONTHEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTimeUnitAccess().getMONTHEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Year'
			{
				$current = grammarAccess.getTimeUnitAccess().getYEAREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getTimeUnitAccess().getYEAREnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
